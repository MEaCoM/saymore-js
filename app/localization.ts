/* --------------------------------------------------------------------
  Set up the stuff handled by lingui
  ---------------------------------------------------------------------*/
import { setupI18n, I18n } from "@lingui/core";
import { userSettings } from "./settings";
import { remote } from "electron";
import { t } from "@lingui/macro";
import moment from "moment";

const languages = ["en", "es", "fr", "ps"];
export const catalogs = {};
export let currentUILanguage: string;
export let i18n: I18n;

export function initializeLocalization() {
  // messages.js are generated by ``yarn lingui-compile``
  languages.forEach(
    code => (catalogs[code] = require(`../locale/${code}/messages.js`))
  );

  currentUILanguage = userSettings.get("uiLanguage", "");
  // if the language in the settings isn't one this version supports,
  // or if there was no setting for this and we have the default (empty string)
  if (languages.indexOf(currentUILanguage) < 0) {
    // See if their OS's language is one we support
    currentUILanguage = remote.app.getLocale();
    // Do we have a localization for that language? If not, the default is English.
    if (languages.indexOf(currentUILanguage) < 0) {
      currentUILanguage = "en";
    }
  }

  i18n = setupI18n({
    language: currentUILanguage,
    catalogs
  }).use(currentUILanguage);

  moment.locale(currentUILanguage); // this is a global change
}

export function setUILanguage(code: string): void {
  currentUILanguage = code;
  i18n.use(code);
  userSettings.set("uiLanguage", code);
  remote.getCurrentWindow().reload();
}

// This is for strings that are not part of react, e.g. menus. They use this i18n variable to do localization

/* --------------------------------------------------------------------
  Handle the l10n of various data files while we wait for lingui to 
  be able to handle non-code input.
  ---------------------------------------------------------------------*/
// I don't have a way of making the lingui-extract scanner scan our fields.json, so I just extracted this csv manually,
// and it lives as a second file on Crowdin.com that has to be translated.
import fields from "../locale/fields.csv";
import { Field } from "./model/field/Field";
import choices from "../locale/choices.csv";
import roles from "../locale/roles.csv";
import genres from "../locale/genres.csv";
import accessProtocols from "../locale/accessProtocols.csv";

export function translateFileType(englishTypeName: string): string {
  switch (englishTypeName) {
    case "Project":
      return i18n._(t`Project`);
    case "Session":
      return i18n._(t`Session`);
    case "Person":
      return i18n._(t`Person`);
    case "Video":
      return i18n._(t`Video`);
    case "Image":
      return i18n._(t`Image`);
    case "Audio":
      return i18n._(t`Audio`);
    default:
      return englishTypeName; // e.g. "mp3"
  }
}

export function translateFieldLabel(field: Field): string {
  if (field === undefined) {
    return "LABEL ERROR";
  }
  return getMatch(fields, field.englishLabel);
}
export function translateAccessProtocol(choice: string): string {
  return getMatch(accessProtocols, choice);
}
export function translateChoice(choice: string): string {
  return getMatch(choices, choice);
}

export function translateRole(role: string) {
  return getMatch(roles, role);
}

export function translateGenre(genre: string) {
  return getMatch(genres, genre);
}
function getMatch(lines: any[], s: string): string {
  if (currentUILanguage === "ps") {
    return "Pseudo" + s;
  }
  const key = toCsvLanguageKey();
  const match = lines.find(f => f.En === s);
  if (match && match[key]) {
    return match[key];
  }
  //console.log(`No ${currentUILanguage} translation for ${s}, "${s}"`);
  return s;
}
// in this csv, we have "En", "Es", etc. Not "en", "es"... which is what the po file-based things use
function toCsvLanguageKey() {
  return currentUILanguage.charAt(0).toUpperCase() + currentUILanguage.slice(1);
}

/* --------------------------------------------------------------------
  Set up the stuff handled by lingui
  ---------------------------------------------------------------------*/
import { setupI18n, I18n } from "@lingui/core";
import { userSettings } from "./containers/settings";
import { remote } from "electron";

const languages = ["en", "es", "fr"];
export const catalogs = {};
// messages.js are generated by ``yarn lingui-compile``
languages.forEach(
  code => (catalogs[code] = require(`../locale/${code}/messages.js`))
);

export let currentUILanguage = userSettings.get("uiLanguage", "");
// if the language in the settings isn't one this version supports,
// or if there was no setting for this and we have the default (empty string)
if (languages.indexOf(currentUILanguage) < 0) {
  // See if their OS's language is one we support
  currentUILanguage = remote.app.getLocale();
  // Do we have a localization for that language? If not, the default is English.
  if (languages.indexOf(currentUILanguage) < 0) {
    currentUILanguage = "en";
  }
}
export function setUILanguage(code: string): void {
  currentUILanguage = code;
  i18n.use(code);
  userSettings.set("uiLanguage", code);
  remote.getCurrentWindow().reload();
}

// This is for strings that are not part of react, e.g. menus. They use this i18n variable to do localization
export let i18n = setupI18n({
  language: currentUILanguage,
  catalogs
}).use(currentUILanguage);

/* --------------------------------------------------------------------
  Handle the l10n handled by our fields.csv
  ---------------------------------------------------------------------*/
// I don't have a way of making the lingui-extract scanner scan our fields.json, so I just extracted this csv manually,
// and it lives as a second file on Crowdin.com that has to be translated.
import fields from "../locale/fields.csv";
export function translateFieldLabel(english: string): string {
  // in this csv, we have "En", "Es", etc. Not "en", "es"... which is what the po file-based things use
  const key =
    currentUILanguage.charAt(0).toUpperCase() + currentUILanguage.slice(1);
  const match = fields.find(f => f.En === english);
  if (match) {
    return match[key];
  }
  return english;
}
